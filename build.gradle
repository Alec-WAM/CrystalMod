
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

repositories {
    maven { // JEI
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name 'OC Repo'
        url "http://maven.cil.li/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
	ivy {
        name "BuildCraft"
        artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision](-[classifier]).[ext]"
    }
}

version = "${config.version}-${config.build_number}"
group= "alec_wam.CrystalMod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_name

srcCompat = JavaVersion.VERSION_1_8
targetCompat = JavaVersion.VERSION_1_8

jar {
    manifest {
        attributes("FMLCorePluginContainsFMLMod": "true", "FMLCorePlugin": "alec_wam.CrystalMod.asm.LoadingPlugin")
    }
}

minecraft {
    version = "${config.mc_version}-${config.forge_version}"
    runDir = "run"
    
	replace "@VERSION@", project.version
	replaceIn "CrystalMod.java"
	replaceIn "mcmod.info"
    
    mappings = config.mc_mappings
    useDepAts = true
}

dependencies {
	deobfCompile "mezz.jei:jei_1.10.2:3.13.2.353:api"
    runtime "mezz.jei:jei_1.10.2:3.13.2.353"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

/**
 * Increments the buildnumber in your config file, and saves it
 */
task incrementBuildNumber(dependsOn: 'reobfJar') << {
    config.build_number = (config.build_number.toString().toInteger()) + 1
    configFile.withWriter {
        config.toProperties().store(it, "")
    }

    // todo make this flexibile - collection of supported mc versions

    file("${config.dir_repo}/version/${minecraft.version}.txt").write("${version}")
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

defaultTasks 'clean', 'build', 'incrementBuildNumber'

